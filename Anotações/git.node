1. Abrir o Terminal no VS Code
No VS Code, v√° para Terminal > Novo Terminal.
2. Configurar Seu Usu√°rio e E-mail no Git
Se ainda n√£o fez isso, configure seu nome e e-mail com os comandos:

git config --global user.name "println-lucas"
git config --global user.email "lucassilvagabriel92@gmail.com"

4. Autenticar via Token Pessoal (Se Usar HTTPS)
Se usar HTTPS, voc√™ precisa de um token de acesso (j√° que o GitHub n√£o aceita mais senhas diretas):

No GitHub, v√° para Settings > Developer Settings > Personal Access Tokens.
Gere um novo token com permiss√µes para reposit√≥rios.
Use esse token ao clonar ou fazer push/pull:

git clone https://github.com/usuario/repo.git

Agora voc√™ pode clonar reposit√≥rios, enviar commits e sincronizar com o GitHub diretamente pelo terminal do VS Code! üöÄ
==================================================================================
1Ô∏è‚É£ Clonar o Reposit√≥rio para seu Computador
Se ainda n√£o clonou o reposit√≥rio, abra o terminal do VS Code e execute:

git clone https://github.com/usuario/repo.git

Depois, acesse a pasta do projeto:
cd nome-do-repo

E abra no VS Code:
code .

2Ô∏è‚É£ Criar uma Nova Branch (Opcional, mas Recomendado)
Se for trabalhar em uma nova funcionalidade ou corre√ß√£o, crie uma branch:

git checkout -b minha-nova-branch

3Ô∏è‚É£ Editar o C√≥digo
Agora voc√™ pode editar os arquivos normalmente no VS Code.

4Ô∏è‚É£ Adicionar e Comitar as Mudan√ßas
Depois de fazer as edi√ß√µes, salve os arquivos e volte ao terminal para adicionar as mudan√ßas:

git add .
Crie um commit com uma mensagem descritiva:

git commit -m "Descri√ß√£o do que foi alterado"

5Ô∏è‚É£ Enviar as Mudan√ßas para o GitHub
Se criou uma nova branch, envie para o reposit√≥rio remoto:

git push origin minha-nova-branch

Se estiver na branch principal (main ou master):

git push origin main

6Ô∏è‚É£ Criar um Pull Request (Se Necess√°rio)
Se trabalhou em uma branch nova, v√° ao GitHub e crie um Pull Request para mesclar as altera√ß√µes na branch principal.
